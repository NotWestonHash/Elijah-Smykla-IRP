{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\ndistance Dist = distance(PORT2);\nmotor FD = motor(PORT1, false);\nmotor RD = motor(PORT6, false);\nmotor LD = motor(PORT7, false);\nmotor BD = motor(PORT12, false);\ncontroller Controller = controller();\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n#pragma endregion VEXcode Generated Robot Configuration\n\n#include \"vex.h\"\nusing namespace vex;\nint axisA=0;//LV\nint axisB=0;//LH\nint axisC=0;//RV\nint axisD=0;//RH\nint orientX=0;//postorient\nint orientY=0;//postorient\nint spinV=0;//rightjoy\nint theta=0;\n\n\n\n// Create pathfinding as something done by the robot on keystroke\n\n// setMaxTorque(100,percent);\n\nvoid motorset(){\n  //Stoptypes\n  FD.setStopping(brake);\n  LD.setStopping(brake);\n  BD.setStopping(brake);\n  RD.setStopping(brake);\n  //RG.setStopping(brake);\n  //LG.setStopping(brake);\n  //Load.setStopping(brake);\n  //Alt.setStopping(hold);\n  //Torquesets\n  FD.setMaxTorque(100,percent);\n  LD.setMaxTorque(100,percent);\n  BD.setMaxTorque(100,percent);\n  RD.setMaxTorque(100,percent);\n  //RG.setMaxTorque(100,percent);\n  //LG.setMaxTorque(100,percent);\n  //Load.setMaxTorque(100,percent);\n  //Alt.setMaxTorque(100,percent);\n  //Novelocity\n  FD.setVelocity(0,percent);\n  LD.setVelocity(0,percent);\n  BD.setVelocity(0,percent);\n  RD.setVelocity(0,percent);\n  //Spinmotors\n  FD.spin(forward);\n  LD.spin(forward);\n  BD.spin(forward);\n  RD.spin(forward);\n}\n\nvoid fupcalibrater(){\n  while(true){\n    \n  }\n}\n\nint main() {\n  motorset();\n  BrainInertial.calibrate();\n  while(!Controller.ButtonFUp.pressing()){\n    wait(10,msec);\n  }\n  BrainInertial.setHeading(0, degrees);\n  BrainInertial.setRotation(0, degrees);\n  while(true){\n    axisA=Controller.AxisA.position();\n    axisB=Controller.AxisB.position();\n    axisC=Controller.AxisC.position();\n    axisD=Controller.AxisD.position();\n    spinV=axisD;//BXAY\n    //0/0 witin atan.\n    //use some logic to better determine Î¸\n    if(axisB==0){\n      theta=0;\n    }\n    else{\n      theta=atan(axisA/axisB);  \n    }\n    orientX=sqrt(pow(axisB,2)+pow(axisA,2))*cos(theta-(M_PI*(BrainInertial.orientation(yaw,degrees)/180)));\n    orientY=sqrt(pow(axisB,2)+pow(axisA,2))*sin(theta-(M_PI*(BrainInertial.orientation(yaw,degrees)/180)));\n    //naive field orient test:\n    Brain.Screen.newLine();\n\n    Brain.Screen.print(\"%f\",BrainInertial.orientation(yaw,degrees));\n\n    FD.setVelocity(orientX,percent);\n    BD.setVelocity(-orientX,percent);\n    RD.setVelocity(-orientY,percent);\n    LD.setVelocity(orientY,percent);\n    if(Controller.ButtonRUp.pressing()){\n      FD.setVelocity(100,percent);\n      BD.setVelocity(100,percent);\n      RD.setVelocity(100,percent);\n      LD.setVelocity(100,percent);\n      wait(10,msec);\n    }\n  }\n\n}","textLanguage":"cpp","rconfig":[{"port":[2],"name":"Dist","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[1],"name":"FD","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[6],"name":"RD","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[7],"name":"LD","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[12],"name":"BD","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.5","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","target":"Physical"}